[{"/Users/ali/projects/car-ownership-token-erc721/src/App.js":"1","/Users/ali/projects/car-ownership-token-erc721/src/Result.js":"2","/Users/ali/projects/car-ownership-token-erc721/src/index.js":"3","/Users/ali/projects/car-ownership-token-erc721/src/utils/index.js":"4"},{"size":580,"mtime":1609649970320,"results":"5","hashOfConfig":"6"},{"size":4340,"mtime":1609665815411,"results":"7","hashOfConfig":"6"},{"size":216,"mtime":1609659577922,"results":"8","hashOfConfig":"6"},{"size":1774,"mtime":1609665873811,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"nzzje7",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ali/projects/car-ownership-token-erc721/src/App.js",[],"/Users/ali/projects/car-ownership-token-erc721/src/Result.js",["19"],"import React, { Component } from 'react';\nimport { Button, FormControl, Row, Col, Card, Form } from 'react-bootstrap';\n\nimport { mintToken, fetchTokens } from './utils';\nclass Result extends Component {\n  state = {\n    accounts: undefined,\n    isLoadingFetchTokens: true,\n    fetchedTokens: undefined,\n    isLoadingMintToken: true,\n    carCodeInput: '',\n    carImageInput: '',\n    newTokens: [],\n  };\n\n  componentDidMount = async () => {\n    if (!window.ethereum) return;\n\n    const accounts = await this.getAccountsFromMetamask();\n    if (Array.isArray(accounts) && accounts.length > 0) {\n      await this.fetchTokens(accounts[0]);\n    }\n  };\n\n  getAccountsFromMetamask = async () => {\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts',\n    });\n    this.setState({ accounts });\n    return accounts;\n  };\n\n  fetchTokens = async (owner) => {\n    const { tokenInstance } = this.props;\n    this.setState({ isLoadingFetchTokens: true });\n    try {\n      const fetchedTokens = await fetchTokens(tokenInstance, owner);\n      this.setState({ isLoadingFetchTokens: false, fetchedTokens });\n    } catch (err) {\n      console.log('debug fetch tokens', err);\n      this.setState({ isLoadingFetchTokens: false });\n    }\n  };\n\n  mintToken = async () => {\n    const { tokenInstance } = this.props;\n    const { accounts, carCodeInput, carImageInput } = this.state;\n\n    if (!Array.isArray(accounts) || accounts.length == 0) return;\n\n    const carAttributes = [\n      carCodeInput, // code\n      carImageInput, // img\n    ];\n\n    try {\n      const newToken = await mintToken(\n        tokenInstance,\n        carAttributes,\n        accounts[0]\n      );\n      const newTokensCopy = this.state.newTokens;\n      newTokensCopy.push(newToken);\n      this.setState({ newTokens: newTokensCopy });\n    } catch (err) {\n      console.log('debug error mint', err);\n    }\n  };\n\n  render() {\n    if (!window.ethereum) return 'No metamask is connected';\n    const { fetchedTokens, newTokens } = this.state;\n    console.log('debug fetchedTokens', fetchedTokens);\n\n    return (\n      <div className=\"App\">\n        <div style={{ marginTop: '50px', marginBottom: '50px' }}>\n          <h1>All Cars (ERC-721):</h1>\n          <div style={{ marginLeft: '10px', marginRight: '10px' }}>\n            <Row>\n              <Col md={9}>\n                <Row>\n                  {Array.isArray(fetchedTokens) && fetchedTokens.map(CarLayout)}\n                  {Array.isArray(newTokens) && newTokens.map(CarLayout)}\n                </Row>\n              </Col>\n              <Col md={3}>\n                <Card style={{ marginBottom: '30px' }}>\n                  <Card.Header>Mint A New Car</Card.Header>\n                  <Card.Body>\n                    <Form>\n                      <Form.Group>\n                        <Form.Label>Card Code</Form.Label>\n                        <FormControl\n                          onChange={(e) => {\n                            this.setState({ carCodeInput: e.target.value });\n                          }}\n                        />\n                      </Form.Group>\n\n                      <Form.Group controlId=\"formBasicPassword\">\n                        <Form.Label>Car Image</Form.Label>\n                        <FormControl\n                          onChange={(e) => {\n                            this.setState({ carImageInput: e.target.value });\n                          }}\n                        />\n                      </Form.Group>\n                      <Button\n                        variant=\"primary\"\n                        type=\"button\"\n                        onClick={this.mintToken}\n                      >\n                        Mint a new car\n                      </Button>\n                    </Form>\n                  </Card.Body>\n                </Card>\n              </Col>\n            </Row>\n          </div>\n          <br />\n          <br />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst CarLayout = ({ code, img, tokenIdStr, owner }) => (\n  <Col md={3} style={{ marginBottom: '10px' }}>\n    <Card>\n      <Card.Img src={img} />\n      <Card.Body>\n        <Card.Title>{code}</Card.Title>\n        <p>Car ID: {tokenIdStr}</p>\n        <p>Owner: {owner}</p>\n        <Button variant=\"success\">Transfer Ownership</Button>\n      </Card.Body>\n    </Card>\n  </Col>\n);\n\nexport default Result;\n","/Users/ali/projects/car-ownership-token-erc721/src/index.js",[],"/Users/ali/projects/car-ownership-token-erc721/src/utils/index.js",[],{"ruleId":"20","severity":1,"message":"21","line":49,"column":53,"nodeType":"22","messageId":"23","endLine":49,"endColumn":55},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]